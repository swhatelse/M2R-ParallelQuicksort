# -*- coding: utf-8 -*-
#+STARTUP: overview indent inlineimages
#+TITLE:       Laboratory Notebook for a Multi-Threaded Version of Quicksort
#+AUTHOR:      Arnaud Legrand
#+LANGUAGE:    en
#+TAGS: IMPORTANT(i) TEST(t) DEPRECATED(d) noexport(n)

* Project Overview
This project aims at providing an efficient multi-threaded
implementation of the QuickSort algorithm on multi-core machines. This
document contains my attempts to evaluate the performance of an
implementation of such code.
* General Organization
** src/
This directory comprises the parallel implementation and a standard
Makefile to compile it.
** data/
This is where raw experimental data should go. Each directory entry
comprises a set of experiments and the directory name is based on the
machine name and on the date. For example:
#+begin_src sh :results output :exports both 
echo mkdir data/`hostname`_`date +%F`
#+end_src

#+RESULTS:
: mkdir data/sama_2014-10-13

* Typical usage
** Compilation
A simple makefile with various compilation options is provided in the
src/ directory. Compilation is thus done by running the following command:
#+begin_src sh :results output :exports both 
make -C src/
#+end_src

#+RESULTS:
: make: Entering directory '/home/alegrand/Work/Documents/Enseignements/M2R_Eval_Perf_13/M2R-ParallelQuicksort/src'
: cc   -g -Wall -Wshadow -Wcast-align -Waggregate-return -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wpointer-arith -Wwrite-strings -finline-functions -O0 -pthread -lrt -std=c99  -c -o parallelQuicksort.o parallelQuicksort.c
: cc   -g -Wall -Wshadow -Wcast-align -Waggregate-return -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wpointer-arith -Wwrite-strings -finline-functions -O0 -pthread -lrt -std=c99  parallelQuicksort.o  -o parallelQuicksort 
: make: Leaving directory '/home/alegrand/Work/Documents/Enseignements/M2R_Eval_Perf_13/M2R-ParallelQuicksort/src'

** Running the code
The code is quite simple at the moment and can be run in the following way:
#+begin_src
./src/parallelQuicksort [1000000]
#+end_src
When run, the code executes initializes an array of the size given in
argument (1000000 by default) with random integer values and sorts it
using:
1. a custom sequential implementation;
2. a custom parallel implementation;
3. the libc qsort function.
Times are reported in seconds.
* Experimental Reports
** 2014-10-13
*** Initial code design
- I obtained an initial implementation from
  http://sc12.supercomputing.org/hpceducator/PythonForParallelism/codes/parallelQuicksort.c.
  According to the header, the original author is Joshua Stough from
  Washington and Lee University. I hope he will not mind that I reuse
  this piece of code for educational purposes.
- Here is a typical first execution on my laptop (an Intel(R) Core(TM)
  i7 running a Debian with Linux 3.14.15):
  #+begin_src sh :results output :exports both 
    ./src/quicksort
  #+end_src

  #+RESULTS:
  : Sequential quicksort took: 0.231571 sec.
  : at loc 506315, 5.068226e-01 < 5.068269e-01 
  : Oops, lyst did not get sorted by parallelQuicksort.
  : Parallel quicksort took: 0.161259 sec.
  : Built-in qsort took: 0.241568 sec.

  Sweet, in my first attempt, it looks like this parallel version is
  indeed running faster than then sequential one. I have to say this
  warning message is stressing me a bit though.
- On smaller instances, the code would segfault. So I reindented the
  code and thanks to valgrind and gdb, I could find what was wrong. I
  also renamed the file so that compiling is more convenient. This
  fixed the previous warning message so now everything seems fine:
  #+begin_src sh :results output :exports both 
    ./src/parallelQuicksort
  #+end_src

  #+RESULTS:
  : Sequential quicksort took: 0.239347 sec.
  : Parallel quicksort took: 0.176365 sec.
  : Built-in quicksort took: 0.244716 sec.

*** First series of experiments
Let's try to see how the three algorithms behave when changing the 
array size. Since one measurement is not enough, I run the code 5
times in a row.
#+begin_src sh foo :results output :exports both :tangle scripts/run_benchmarking.sh
  OUTPUT_DIRECTORY=data/`hostname`_`date +%F`
  mkdir -p $OUTPUT_DIRECTORY
  OUTPUT_FILE=$OUTPUT_DIRECTORY/measurements_`date +%R`.txt

  touch $OUTPUT_FILE
  for i in 100 1000 10000 100000 1000000; do
      for rep in `seq 1 5`; do
          echo "Size: $i" >> $OUTPUT_FILE;
          ./src/parallelQuicksort $i >> $OUTPUT_FILE;
      done ;
  done
#+end_src
I obtained the following [[file:data/sama_2014-10-13/measurements_03:47.txt][output]].

*** A simple plot with R
Here is a simple script to parse the results:
#+begin_src perl :results output raw :exports both :tangle scripts/csv_quicksort_extractor.pl
  use strict;

  my($line);
  my($size);

  print "Size, Type, Time\n" ;
  while($line=<>) {
      chomp $line;
      if($line =~/^Size: ([\d\.]*)$/) {
          $size = $1;
          next;
      } 
      if($line =~/^(.*) quicksort.*: ([\d\.]*) sec.$/) {
          print "$size, \"$1\", $2\n" ;
          next;
      } 
  }
#+end_src

I can then simply parse my data with the following command:

#+begin_src sh :results output :exports both 
perl scripts/csv_quicksort_extractor.pl < data/sama_2014-10-13/measurements_03\:47.txt > data/sama_2014-10-13/measurements_03\:47.csv
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file data/sama_2014-10-13/measurements_03:47.png :exports both :width 600 :height 400 :session
  df <- read.csv("data/sama_2014-10-13/measurements_03:47.csv",header=T)
  plot(df$Size,df$Time,col=c("red","blue","green")[df$Type])
#+end_src

#+RESULTS:
[[file:data/sama_2014-10-13/measurements_03:47.png]]

Well, this is not particularly nice and some may not know/like R.
*** A simple plot with gnuplot
So let's try to parse in an other way and use gnuplot:

#+begin_src perl :results output raw :exports both :tangle scripts/csv_quicksort_extractor2.pl
  use strict;

  my($line);
  my($size);
  my($seq,$par,$libc);
  print "Size, Seq, Par, Libc\n" ;
  while($line=<>) {
      chomp $line;
      if($line =~/^Size: ([\d\.]*)$/) {
          $size = $1;
          next;
      } 
      if($line =~/^Sequential quicksort.*: ([\d\.]*) sec.$/) {
          $seq=$1; next;
      } 
      if($line =~/^Parallel quicksort.*: ([\d\.]*) sec.$/) {
          $par=$1; next;
      } 
      if($line =~/^Built-in quicksort.*: ([\d\.]*) sec.$/) {
          $libc=$1; 
          print "$size, $seq, $pqr, $libc\n";
          next;
      }
  }
#+end_src

#+begin_src sh :results output raw :exports both 
  FILENAME="data/sama_2014-10-13/measurements_03:47"
  perl scripts/csv_quicksort_extractor2.pl < "$FILENAME.txt" > "${FILENAME}_wide.csv"
  echo "
    set terminal png size 600,400 
    set output '${FILENAME}_wide.png'
    set datafile separator ','
    set key autotitle columnhead
    plot '${FILENAME}_wide.csv' using 1:2 with linespoints, '' using 1:3 with linespoints, '' using 1:4 with linespoints
  " | gnuplot
  echo [[file:${FILENAME}_wide.png]]
#+end_src

#+RESULTS:
[[file:data/sama_2014-10-13/measurements_03:47_wide.png]]

Well, I'm not sure it is nicer but I have lines. A first crude
analysis seems to reveal the the parallel version is worth it for
arrays larger than 400000.
** 2015-11-02
*** Goal of the experiment
The previous results show that the parallel algorithm was less efficient than the 
others when the size of the data is less then 350000. The most likely reason is the 
that the overhead of managing thread is maybe to costly for data of size bellow 350000.  
Lets try to see how the performances are impacted if we change the number of threads 
for data under 350000
*** Protocole
**** Environment
In order to analyse the result, we need to know the caracteristics of the machines ( power, memory size, etc...).
***** CPU 
#+BEGIN_SRC sh :results output :exports both 
          less /proc/cpuinfo
#+END_SRC

#+RESULTS:
      #+begin_example
      processor	: 0
      vendor_id	: AuthenticAMD
      cpu family	: 16
      model		: 10
      model name	: AMD Phenom(tm) II X6 1055T Processor
      stepping	: 0
      microcode	: 0x10000bf
      cpu MHz		: 2809.523
      cache size	: 512 KB
      physical id	: 0
      siblings	: 6
      core id		: 0
      cpu cores	: 6
      apicid		: 0
      initial apicid	: 0
      fpu		: yes
      fpu_exception	: yes
      cpuid level	: 6
      wp		: yes
      flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc extd_apicid aperfmperf pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt cpb hw_pstate npt lbrv svm_lock nrip_save pausefilter vmmcall
      bogomips	: 5619.04
      TLB size	: 1024 4K pages
      clflush size	: 64
      cache_alignment	: 64
      address sizes	: 48 bits physical, 48 bits virtual
      power management: ts ttp tm stc 100mhzsteps hwpstate cpb

      processor	: 1
      vendor_id	: AuthenticAMD
      cpu family	: 16
      model		: 10
      model name	: AMD Phenom(tm) II X6 1055T Processor
      stepping	: 0
      microcode	: 0x10000bf
      cpu MHz		: 2809.523
      cache size	: 512 KB
      physical id	: 0
      siblings	: 6
      core id		: 1
      cpu cores	: 6
      apicid		: 1
      initial apicid	: 1
      fpu		: yes
      fpu_exception	: yes
      cpuid level	: 6
      wp		: yes
      flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc extd_apicid aperfmperf pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt cpb hw_pstate npt lbrv svm_lock nrip_save pausefilter vmmcall
      bogomips	: 5619.04
      TLB size	: 1024 4K pages
      clflush size	: 64
      cache_alignment	: 64
      address sizes	: 48 bits physical, 48 bits virtual
      power management: ts ttp tm stc 100mhzsteps hwpstate cpb

      processor	: 2
      vendor_id	: AuthenticAMD
      cpu family	: 16
      model		: 10
      model name	: AMD Phenom(tm) II X6 1055T Processor
      stepping	: 0
      microcode	: 0x10000bf
      cpu MHz		: 2809.523
      cache size	: 512 KB
      physical id	: 0
      siblings	: 6
      core id		: 2
      cpu cores	: 6
      apicid		: 2
      initial apicid	: 2
      fpu		: yes
      fpu_exception	: yes
      cpuid level	: 6
      wp		: yes
      flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc extd_apicid aperfmperf pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt cpb hw_pstate npt lbrv svm_lock nrip_save pausefilter vmmcall
      bogomips	: 5619.04
      TLB size	: 1024 4K pages
      clflush size	: 64
      cache_alignment	: 64
      address sizes	: 48 bits physical, 48 bits virtual
      power management: ts ttp tm stc 100mhzsteps hwpstate cpb

      processor	: 3
      vendor_id	: AuthenticAMD
      cpu family	: 16
      model		: 10
      model name	: AMD Phenom(tm) II X6 1055T Processor
      stepping	: 0
      microcode	: 0x10000bf
      cpu MHz		: 2809.523
      cache size	: 512 KB
      physical id	: 0
      siblings	: 6
      core id		: 3
      cpu cores	: 6
      apicid		: 3
      initial apicid	: 3
      fpu		: yes
      fpu_exception	: yes
      cpuid level	: 6
      wp		: yes
      flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc extd_apicid aperfmperf pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt cpb hw_pstate npt lbrv svm_lock nrip_save pausefilter vmmcall
      bogomips	: 5619.04
      TLB size	: 1024 4K pages
      clflush size	: 64
      cache_alignment	: 64
      address sizes	: 48 bits physical, 48 bits virtual
      power management: ts ttp tm stc 100mhzsteps hwpstate cpb

      processor	: 4
      vendor_id	: AuthenticAMD
      cpu family	: 16
      model		: 10
      model name	: AMD Phenom(tm) II X6 1055T Processor
      stepping	: 0
      microcode	: 0x10000bf
      cpu MHz		: 2809.523
      cache size	: 512 KB
      physical id	: 0
      siblings	: 6
      core id		: 4
      cpu cores	: 6
      apicid		: 4
      initial apicid	: 4
      fpu		: yes
      fpu_exception	: yes
      cpuid level	: 6
      wp		: yes
      flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc extd_apicid aperfmperf pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt cpb hw_pstate npt lbrv svm_lock nrip_save pausefilter vmmcall
      bogomips	: 5619.04
      TLB size	: 1024 4K pages
      clflush size	: 64
      cache_alignment	: 64
      address sizes	: 48 bits physical, 48 bits virtual
      power management: ts ttp tm stc 100mhzsteps hwpstate cpb

      processor	: 5
      vendor_id	: AuthenticAMD
      cpu family	: 16
      model		: 10
      model name	: AMD Phenom(tm) II X6 1055T Processor
      stepping	: 0
      microcode	: 0x10000bf
      cpu MHz		: 2809.523
      cache size	: 512 KB
      physical id	: 0
      siblings	: 6
      core id		: 5
      cpu cores	: 6
      apicid		: 5
      initial apicid	: 5
      fpu		: yes
      fpu_exception	: yes
      cpuid level	: 6
      wp		: yes
      flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc extd_apicid aperfmperf pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt cpb hw_pstate npt lbrv svm_lock nrip_save pausefilter vmmcall
      bogomips	: 5619.04
      TLB size	: 1024 4K pages
      clflush size	: 64
      cache_alignment	: 64
      address sizes	: 48 bits physical, 48 bits virtual
      power management: ts ttp tm stc 100mhzsteps hwpstate cpb

#+end_example

***** Memory
#+BEGIN_SRC sh :results output :exports both
  less /proc/meminfo
#+END_SRC

        #+RESULTS:
        #+begin_example
        MemTotal:        8175324 kB
        MemFree:         4915168 kB
        MemAvailable:    6449316 kB
        Buffers:          114220 kB
        Cached:          1563988 kB
        SwapCached:            0 kB
        Active:          1933784 kB
        Inactive:         858428 kB
        Active(anon):    1115360 kB
        Inactive(anon):    19536 kB
        Active(file):     818424 kB
        Inactive(file):   838892 kB
        Unevictable:           0 kB
        Mlocked:               0 kB
        SwapTotal:       8000508 kB
        SwapFree:        8000508 kB
        Dirty:               216 kB
        Writeback:             0 kB
        AnonPages:       1116092 kB
        Mapped:           519688 kB
        Shmem:             20900 kB
        Slab:             120576 kB
        SReclaimable:      91520 kB
        SUnreclaim:        29056 kB
        KernelStack:        8496 kB
        PageTables:        22888 kB
        NFS_Unstable:          0 kB
        Bounce:                0 kB
        WritebackTmp:          0 kB
        CommitLimit:    12088168 kB
        Committed_AS:    3553672 kB
        VmallocTotal:   34359738367 kB
        VmallocUsed:      319592 kB
        VmallocChunk:   34359413500 kB
        HardwareCorrupted:     0 kB
        AnonHugePages:    364544 kB
        HugePages_Total:       0
        HugePages_Free:        0
        HugePages_Rsvd:        0
        HugePages_Surp:        0
        Hugepagesize:       2048 kB
        DirectMap4k:      115264 kB
        DirectMap2M:     1980416 kB
        DirectMap1G:     6291456 kB
        #+end_example

***** Kernel
#+begin_src sh :results output :exports both
uname -r
#+END_SRC

#+RESULTS:
: 3.16.0-38-generic

**** Compilation
In order to be able to perform some comparison, we also need to know how the program was compiled
    #+begin_src sh :results output :exports both 
      make -C src/
    #+end_src

      #+RESULTS:
      : make: entrant dans le répertoire « /home/steven/Programmation/M2/EP/M2R-ParallelQuicksort/src »
      : cc   -g -Wall -Wshadow -Wcast-align -Waggregate-return -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wpointer-arith -Wwrite-strings -finline-functions -O0 -pthread -lrt -std=c99  -c -o parallelQuicksort.o parallelQuicksort.c
      : cc   -g -Wall -Wshadow -Wcast-align -Waggregate-return -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wpointer-arith -Wwrite-strings -finline-functions -O0 -pthread -lrt -std=c99  parallelQuicksort.o  -o parallelQuicksort 
      : make: quittant le répertoire « /home/steven/Programmation/M2/EP/M2R-ParallelQuicksort/src »

