#+TITLE: Run experiment
#+AUTHOR: Steven QUINITO MASNADA
#+BABEL: :tangle yes
* General config
  #+begin_src sh :session foo :results output :exports both :tangle yes
    #!/bin/bash
    BASE="$PWD"
    SRC_DIR="$PWD/src"
    DATADIR="$BASE/data"
    PROG="$SRC_DIR/parallelQuicksort"
  #+end_src
* Initialization
** Inputs
   #+begin_src sh :session foo :results output :exports both :tangle yes
     help_script()
     {
         cat << EOF
     Usage: $0 options
     Script to configure and run the experiment.
     
     OPTIONS:
     -h     Show help
     -c     Compile the application
     -d     Use a debbuger: gdb or valgrind(valgrind+gdb)
     -r     Run experiments
     EOF
     }
     
     compile=0
     d=""
     run=0
     
     while getopts "hcd:r" opt; do
     case $opt in
     c)
        compile=1
     ;;
     d)
         if [[ "$OPTARG" == "gdb" ]]; then
           WRAPPER="gdb --args"
         elif [[ "$OPTARG" == "valgrind" ]]; then
           WRAPPER="valgrind --vgdb=yes --vgdb-error=0 --keep-stacktraces=alloc-and-free"
         fi
     ;;
     h)
        help_script
        exit 3
     ;;
     r)
        run=1
     ;;
     esac
     done
   #+end_src
** Data file & folder names
   #+begin_src sh :session foo :results output :exports both :tangle yes
     cd $DATADIR
     DATAFOLD=`date +%Y_%m_%d`
     INFO_NAME="Info"
     DATA_FILE="Data"
     mkdir -p $DATAFOLD
     BKUP=`date +%T`
     # BKUP=0
     # while [ -e $DATAFOLD/$INFO_NAME${BKUP}.org ] || [ -e $DATAFOLD/$INFO_NAME${BKUP}.org~ ]; do
     #     BKUP= `expr $BKUP +1`
     # done
     INFO_FILE="$DATADIR/$DATAFOLD/$INFO_NAME${BKUP}.org"
     DATA_FILE="$DATADIR/$DATAFOLD/$DATA_FILE${BKUP}.txt"
   #+end_src
* Environnement infos
  #+begin_src sh :session foo :results output :exports both :tangle yes
    echo "* Environnement infos" >> $INFO_FILE
  #+end_src
** Harware
  #+begin_src sh :session foo :results output :exports both :tangle yes
    echo "** Hardware" >> $INFO_FILE
  #+end_src
*** CPU
#+begin_src sh :session foo :results output :exports both :tangle yes
  echo "*** CPU" >> $INFO_FILE
  less /proc/cpuinfo >> $INFO_FILE
#+end_src
*** RAM
#+BEGIN_SRC sh :session foo :results output :exports both :tangle yes
      echo "*** Memory" >> $INFO_FILE
  less /proc/meminfo >> $INFO_FILE
#+END_SRC

** Software
    #+begin_src sh :session foo :results output :exports both :tangle yes
    echo "** Software" >> $INFO_FILE
    #+end_src
*** OS
    #+begin_src sh :session foo :results output :exports both :tangle yes
      echo "*** OS" >> $INFO_FILE
      uname -r >> $INFO_FILE
    #+end_src
*** Compiler
** Application
*** Version
* Compilation
  #+BEGIN_SRC sh :session foo :results output :exports both :tangle yes
    echo "Compiling..."
    cd $SRC_DIR
    
    if [[ "$compile" == 1 ]]; then
        make clean
        echo "* Compilation" >> $INFO_FILE
        echo "#+BEGIN_EXAMPLE" >> $INFO_FILE
        make -j7 >> $INFO_FILE
        echo "#+END_EXAMPLE" >> $INFO_FILE
    fi 
  #+end_src
* Run
  Generate experiment with all permutation for the size of the array
  #+begin_src python :results output raw :exports both 
    import itertools
    import os
    import string
    
    if __name__ == '__main__':
        # all_perm = itertools.permutations([100, 1000, 10000, 100000, 1000000])    
        all_perm = itertools.permutations([100, 1000, 10000, 100000, 1000000], 30)    
        for perm in all_perm:
            for x in perm:
                print "Size: " + str(x)
                cmd="./src/parallelQuicksort -s" + str(x)
                handle = os.popen(cmd, 'r')
                for line in handle:
                    print line.rstrip('\r\n')
  #+end_src
  
  Shuffle the size of the array in order to test the size in different
  order. Maybe it can help for the distribution.

  #+begin_src python :results output raw :exports both :tangle scripts/run.py
    import itertools
    import os
    import string
    import random
    
    if __name__ == '__main__':
        array_sizes = [100, 1000, 10000, 100000, 1000000]
        random.shuffle(array_sizes)    
        for x in array_sizes:
            print "Size: " + str(x)
            cmd="./src/parallelQuicksort " + str(x)
            handle = os.popen(cmd, 'r')
            for line in handle:
                print line.rstrip('\r\n')
  #+end_src

  #+begin_src sh :session foo :results output :exports both :tangle yes 
    if [[ "$run" == 1 ]]; then
        cd $BASE
        echo "Running..."
        chmod 700 ./scripts/run.py
    
        for i in {1..30}
        do
            python ./scripts/run.py >> $DATA_FILE
        done
    fi
  #+end_src
  
